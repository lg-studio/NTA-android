buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.google.gms.google-services'

android {
    def versions = rootProject.ext.appVersions

    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "com.usinformatics.nytrip"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk

        versionCode versions.versionCode
        versionName versions.versionName
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
/*

    sourceSets.main.jni.srcDirs = [] // disable automatic ndk-build call, which ignore our Android.mk
    sourceSets.main.jniLibs.srcDir 'libs'
*/

    /*// call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        workingDir file('./')
        commandLine getNdkBuildCmd()
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    task cleanNative(type: Exec) {
        workingDir file('./')
        commandLine getNdkBuildCmd(), 'clean'
    }

    clean.dependsOn cleanNative*/

    lintOptions {
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
    }
}

repositories { mavenCentral()
    maven { url 'https://maven.fabric.io/public' } }

dependencies {

    def versions = rootProject.ext.libraryVersions

    compile group:'com.github.mpkorstanje', name: 'simmetrics-core', version:'3.0.4'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':domain')
    compile project(':repository')
    compile project(':secure_preferences')
    compile project(':expandapleList')
    compile "com.android.support:appcompat-v7:${versions.support}"
    compile 'com.facebook.android:facebook-android-sdk:4.0.0'
    compile 'com.google.android.gms:play-services:7.5.0'
    compile "com.android.support:support-v13:${versions.support}"
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.google.maps.android:android-maps-utils:0.3.4'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile "com.android.support:cardview-v7:${versions.support}"
    compile 'com.github.rahatarmanahmed:circularprogressview:2.3.2'
    compile "com.android.support:support-v4:${versions.support}"
    compile 'com.google.android.gms:play-services:7.5.+'
    compile 'com.android.support:multidex:1.0.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.4.0@aar') {
        transitive = true;
    }

    compile "com.squareup.retrofit:retrofit:${versions.retrofit}"
    compile "com.squareup.okhttp:okhttp:${versions.okhttp}"
    compile "io.reactivex:rxjava:${versions.rxJava}"
    compile "io.reactivex:rxandroid:${versions.rxAndroid}"
    compile "com.jakewharton:butterknife:${versions.butterKnife}"
    compile "com.google.dagger:dagger:${versions.dagger}"
    compile "org.glassfish:javax.annotation:${versions.javaxAnnotations}"
    compile "com.android.support:support-annotations:${versions.support}"

    apt "com.google.dagger:dagger-compiler:${versions.dagger}"
}

/*
def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        ndkbuild += ".cmd"

    return ndkbuild
}
*/
