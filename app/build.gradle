buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'


def versionMajor = 3
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.usinformatics.nytrip"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 1
        versionName "1.0000682"
/*
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild

        versionName "${versionMajor}.${versionMinor}.${versionPatch}"*/


        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
/*

    sourceSets.main.jni.srcDirs = [] // disable automatic ndk-build call, which ignore our Android.mk
    sourceSets.main.jniLibs.srcDir 'libs'
*/

    /*// call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        workingDir file('./')
        commandLine getNdkBuildCmd()
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    task cleanNative(type: Exec) {
        workingDir file('./')
        commandLine getNdkBuildCmd(), 'clean'
    }

    clean.dependsOn cleanNative*/

}

repositories { mavenCentral()
    maven { url 'https://maven.fabric.io/public' } }

dependencies {
    compile group:'com.github.mpkorstanje', name: 'simmetrics-core', version:'3.1.0'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.facebook.android:facebook-android-sdk:4.0.0'
    compile 'com.google.android.gms:play-services:7.5.0'
    compile project(':secure_preferences')
    compile 'com.android.support:support-v13:22.2.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.google.maps.android:android-maps-utils:0.3.4'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'com.android.support:cardview-v7:22.2.0'
    compile 'com.github.rahatarmanahmed:circularprogressview:2.3.2'
    compile 'com.android.support:support-v4:22.2.0'
    compile 'com.google.android.gms:play-services:7.5.+'
    compile project(':expandapleList')
    compile 'com.android.support:multidex:1.0.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.4.0@aar') {
        transitive = true;
    }

}

/*
def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        ndkbuild += ".cmd"

    return ndkbuild
}
*/
